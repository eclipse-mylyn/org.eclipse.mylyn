- name: Get infos on network
  community.docker.docker_network_info:
    name: mylyn_net
  register: network_result

- name: Remove network
  community.docker.docker_network:
    name: mylyn_net
    state: absent
    force: true
  when: network_result.exists and network_result.network.Scope != 'local'
  register: network_result_delete

- name: Create a network
  community.docker.docker_network:
    name: mylyn_net
  when: (not network_result.exists) or (network_result_delete.changed) 

- name: Deploy Container
  community.docker.docker_container:
    name: traefik
    image: traefik:latest
    ports:       
      - "80:80"
      - "443:443"
    restart: true
    restart_policy: "unless-stopped"
    networks:
      - name: mylyn_net
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "/mylyn-runtime-dir/{{ role_name }}/logs:/logs"
      - "/mylyn-config-dir/{{ role_name }}/etc-traefik:/etc/traefik"
      - "/mylyn-config-dir/certs:/certificates"
    labels:
      traefik.enable: "true"
      traefik.docker.network: mylyn_net

      traefik.http.routers.http-catchall.rule: hostregexp(`{host:.+}`)
      traefik.http.routers.http-catchall.entrypoints: web
      traefik.http.routers.http-catchall.middlewares: redirect-to-https
      traefik.http.middlewares.redirect-to-https.redirectscheme.scheme: https

      traefik.http.routers.api_traefik.rule: Host(`traefik.{{common_domain_name}}`)
      traefik.http.routers.api_traefik.service: api@internal
      traefik.http.routers.api_traefik.entrypoints: websecure
      traefik.http.routers.api_traefik.tls: "true"
      traefik.http.routers.api_traefik1.rule: Host(`{{common_domain_name}}`) && (PathPrefix(`/traefikdashboard`) || PathPrefix(`/api`))
      traefik.http.routers.api_traefik1.service: api@internal
      traefik.http.routers.api_traefik1.entrypoints: websecure
      traefik.http.routers.api_traefik1.tls: "true"
      traefik.http.routers.api_traefik1.middlewares: stripprefix_api
      traefik.http.middlewares.stripprefix_api.stripprefix.prefixes: /traefikdashboard
      
      traefik.http.services.api.loadbalancer.passhostheader: "true"
      traefik.http.services.api.loadbalancer.server.port: "8080" 
